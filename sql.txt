USER MANAGEMENT TABLE

create table users (
  id uuid primary key references auth.users (id) not null,
  email text unique not null,
  name text,
  type text default 'user' check (type in ('user', 'admin', 'regulator')),
  avatar_url text not null,
  created_at timestamp default current_timestamp,
  is_away boolean default false not null,
  phone text,
  workspaces text[],
  channels text[]
);

alter table users enable row level security;

create policy "Can view own user data." on users for
select
  using (auth.uid () = id);

create policy "Can update own user data." on users
for update
  using (auth.uid () = id);

create or replace function public.handle_new_user () returns trigger as $$
BEGIN
  if new.raw_user_meta_data->>'avatar_url' is null or new.raw_user_meta_data->>'avatar_url' = '' then
    new.raw_user_meta_data = jsonb_set(new.raw_user_meta_data, '{avatar_url}', 
    '"https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png"' ::jsonb);
  END IF;
  insert into public.users (id, name, type, email, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', 'user', new.email, new.raw_user_meta_data->>'avatar_url');
  return new;
END;
$$ language plpgsql security definer;

create
or replace trigger on_auth_user_created
after insert on auth.users for each row
execute procedure public.handle_new_user ();

ADD WORKSPACE TO USER
create or replace function add_workspace_to_user (user_id uuid, new_workspace text) returns void as $$
BEGIN
  update users set workspaces = workspaces || array[new_workspace]
  where id = user_id;
END;
$$ language plpgsql;

Add MEMBER TO WORKSPACE
create or replace function add_member_to_workspace(user_id text, workspace_id uuid) returns void as $$
begin
  update workspaces set members = members || array[user_id]
  where id = workspace_id;
end;
$$ language plpgsql;

create policy "SuperAdminCanUpdate" on "public"."workspaces" as permissive
for update
to public using ("super_admin" = auth.uid());